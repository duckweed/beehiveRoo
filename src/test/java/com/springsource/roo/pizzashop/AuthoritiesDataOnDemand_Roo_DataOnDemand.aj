// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.springsource.roo.pizzashop;

import com.springsource.roo.pizzashop.Authorities;
import com.springsource.roo.pizzashop.AuthoritiesDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect AuthoritiesDataOnDemand_Roo_DataOnDemand {
    
    declare @type: AuthoritiesDataOnDemand: @Component;
    
    private Random AuthoritiesDataOnDemand.rnd = new SecureRandom();
    
    private List<Authorities> AuthoritiesDataOnDemand.data;
    
    public Authorities AuthoritiesDataOnDemand.getNewTransientAuthorities(int index) {
        Authorities obj = new Authorities();
        setAuthority(obj, index);
        setUsername(obj, index);
        return obj;
    }
    
    public void AuthoritiesDataOnDemand.setAuthority(Authorities obj, int index) {
        String authority = "authority_" + index;
        obj.setAuthority(authority);
    }
    
    public void AuthoritiesDataOnDemand.setUsername(Authorities obj, int index) {
        String username = "username_" + index;
        obj.setUsername(username);
    }
    
    public Authorities AuthoritiesDataOnDemand.getSpecificAuthorities(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Authorities obj = data.get(index);
        Long id = obj.getId();
        return Authorities.findAuthorities(id);
    }
    
    public Authorities AuthoritiesDataOnDemand.getRandomAuthorities() {
        init();
        Authorities obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Authorities.findAuthorities(id);
    }
    
    public boolean AuthoritiesDataOnDemand.modifyAuthorities(Authorities obj) {
        return false;
    }
    
    public void AuthoritiesDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Authorities.findAuthoritiesEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Authorities' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Authorities>();
        for (int i = 0; i < 10; i++) {
            Authorities obj = getNewTransientAuthorities(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
